{"ast":null,"code":"import _slicedToArray from \"/Users/elijahdaniel/User-Onboarding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elijahdaniel/User-Onboarding/src/AppForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\n\nconst AnimalForm = ({\n  errors,\n  touched,\n  values,\n  status\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        animals = _useState2[0],\n        setAnimals = _useState2[1];\n\n  console.log(animals);\n  useEffect(() => {\n    if (status) {\n      setAnimals([...animals, status]);\n    }\n  }, [status]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Field, {\n    component: \"input\",\n    type: \"text\",\n    name: \"species\",\n    placeholder: \"Species\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), touched.species && errors.species && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, errors.species), React.createElement(Field, {\n    type: \"text\",\n    name: \"size\",\n    placeholder: \"Size\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), touched.size && errors.size && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, errors.size), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"vaccinations\",\n    checked: values.vaccinations,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), \"I agree to the Terms and Conditions\"), React.createElement(Field, {\n    component: \"textarea\",\n    type: \"text\",\n    name: \"notes\",\n    placeholder: \"Notes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), touched.notes && errors.notes && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, errors.notes), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Submit!\")), animals.map(animal => React.createElement(\"p\", {\n    key: animal.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, animal.species)));\n};\n\nconst formikHOC = withFormik({\n  mapPropsToValues({\n    species,\n    size,\n    notes,\n    food,\n    vaccinations\n  }) {\n    return {\n      species: species || '',\n      size: size || '',\n      notes: notes || '',\n      food: food || '',\n      vaccinations: vaccinations || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    species: Yup.string().required('not a good input'),\n    size: Yup.number().required(),\n    notes: Yup.string()\n  }),\n\n  handleSubmit(values, {\n    setStatus,\n    resetForm\n  }) {\n    axios.post('https://reqres.in/api/users', values).then(res => {\n      console.log('handleSubmit: then: res: ', res);\n      setStatus(res.data);\n      resetForm();\n    }).catch(err => console.error('handleSubmit: catch: err: ', err));\n  }\n\n});\nconst AnimalFormWithFormik = formikHOC(AnimalForm);\nexport default AnimalFormWithFormik;","map":{"version":3,"sources":["/Users/elijahdaniel/User-Onboarding/src/AppForm.js"],"names":["React","useState","useEffect","Form","Field","withFormik","Yup","axios","AnimalForm","errors","touched","values","status","animals","setAnimals","console","log","species","size","vaccinations","notes","map","animal","id","formikHOC","mapPropsToValues","food","validationSchema","object","shape","string","required","number","handleSubmit","setStatus","resetForm","post","then","res","data","catch","err","error","AnimalFormWithFormik"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Form, Field, withFormik } from 'formik'\nimport * as Yup from 'yup'\nimport axios from 'axios'\n\nconst AnimalForm = ({ errors, touched, values, status }) => {\n  const [animals, setAnimals] = useState([])\n  console.log(animals)\n\n  useEffect(() => {\n    if (status) {\n      setAnimals([...animals, status])\n    }\n  }, [status])\n\n  return (\n    <div>\n      <Form>\n        <Field\n          component='input'\n          type='text'\n          name='species'\n          placeholder='Species'\n        />\n        {touched.species && errors.species && (\n          <p className='error'>{errors.species}</p>\n        )}\n        <Field type='text' name='size' placeholder='Size' />\n        {touched.size && errors.size && <p className='error'>{errors.size}</p>}\n        <label>\n          <Field\n            type='checkbox'\n            name='vaccinations'\n            checked={values.vaccinations}\n          />\n          I agree to the Terms and Conditions\n        </label>\n        <Field\n          component='textarea'\n          type='text'\n          name='notes'\n          placeholder='Notes'\n        />\n        {touched.notes && errors.notes && (\n          <p className='error'>{errors.notes}</p>\n        )}\n        <button>Submit!</button>\n      </Form>\n      {animals.map(animal => (\n        <p key={animal.id}>{animal.species}</p>\n      ))}\n    </div>\n  )\n}\n\nconst formikHOC = withFormik({\n  mapPropsToValues({ species, size, notes, food, vaccinations }) {\n    return {\n      species: species || '',\n      size: size || '',\n      notes: notes || '',\n      food: food || '',\n      vaccinations: vaccinations || false\n    }\n  },\n  validationSchema: Yup.object().shape({\n    species: Yup.string().required('not a good input'),\n    size: Yup.number().required(),\n    notes: Yup.string()\n  }),\n  handleSubmit(values, { setStatus, resetForm }) {\n    axios\n      .post('https://reqres.in/api/users', values)\n      .then(res => {\n        console.log('handleSubmit: then: res: ', res)\n        setStatus(res.data)\n        resetForm()\n      })\n      .catch(err => console.error('handleSubmit: catch: err: ', err))\n  }\n})\nconst AnimalFormWithFormik = formikHOC(AnimalForm)\n\nexport default AnimalFormWithFormik\n"]},"metadata":{},"sourceType":"module"}