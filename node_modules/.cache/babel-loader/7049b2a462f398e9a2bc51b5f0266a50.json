{"ast":null,"code":"var _jsxFileName = \"/Users/elijahdaniel/User-Onboarding/src/AppForm.js\";\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup'; // import axios from 'axios'\n\nconst AppForm = ({\n  errors,\n  touched,\n  values\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"name\",\n    name: \"name\",\n    placeholder: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, errors.name), React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, errors.password), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"term\",\n    checked: values.term,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), \"I agree to the Terms and Conditions\"), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Submit!\")));\n};\n\nconst formikHOC = withFormik({\n  mapPropsToValues({\n    name,\n    password,\n    term\n  }) {\n    return {\n      name: name || '',\n      email: email || '',\n      password: password || '',\n      term: term || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(),\n    email: Yup.email().required(),\n    password: Yup.string().min(6).required()\n  }),\n\n  handleSubmit(values) {\n    console.log(values);\n  }\n\n});\nconst AWF = formikHOC(AppForm);\nexport default AWF;","map":{"version":3,"sources":["/Users/elijahdaniel/User-Onboarding/src/AppForm.js"],"names":["React","Form","Field","withFormik","Yup","AppForm","errors","touched","values","name","email","password","term","formikHOC","mapPropsToValues","validationSchema","object","shape","string","required","min","handleSubmit","console","log","AWF"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,QAAwC,QAAxC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CACA;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA;AAAnB,CAAD,KAAiC;AAC/C,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,WAAW,EAAC,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGD,OAAO,CAACE,IAAR,IAAgBH,MAAM,CAACG,IAAvB,IAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,MAAM,CAACG,IAAX,CAFlC,EAGE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,IAAI,EAAC,OAAzB;AAAiC,IAAA,WAAW,EAAC,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIGF,OAAO,CAACG,KAAR,IAAiBJ,MAAM,CAACI,KAAxB,IAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIJ,MAAM,CAACI,KAAX,CAJpC,EAKE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAuC,IAAA,WAAW,EAAC,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAMGH,OAAO,CAACI,QAAR,IAAoBL,MAAM,CAACK,QAA3B,IAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIL,MAAM,CAACK,QAAX,CAN1C,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC,MAA5B;AAAmC,IAAA,OAAO,EAAEH,MAAM,CAACI,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,wCAPF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXF,CADF,CADF;AAiBD,CAlBD;;AAoBA,MAAMC,SAAS,GAAGV,UAAU,CAAC;AAC3BW,EAAAA,gBAAgB,CAAC;AAAEL,IAAAA,IAAF;AAAQE,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAAD,EAA2B;AACzC,WAAO;AACLH,MAAAA,IAAI,EAAEA,IAAI,IAAI,EADT;AAELC,MAAAA,KAAK,EAAEA,KAAK,IAAI,EAFX;AAGLC,MAAAA,QAAQ,EAAEA,QAAQ,IAAI,EAHjB;AAILC,MAAAA,IAAI,EAAEA,IAAI,IAAI;AAJT,KAAP;AAMD,GAR0B;;AAS3BG,EAAAA,gBAAgB,EAAEX,GAAG,CAACY,MAAJ,GAAaC,KAAb,CAAmB;AACnCR,IAAAA,IAAI,EAAEL,GAAG,CAACc,MAAJ,GAAaC,QAAb,EAD6B;AAEnCT,IAAAA,KAAK,EAAEN,GAAG,CAACM,KAAJ,GAAYS,QAAZ,EAF4B;AAGnCR,IAAAA,QAAQ,EAAEP,GAAG,CAACc,MAAJ,GACPE,GADO,CACH,CADG,EAEPD,QAFO;AAHyB,GAAnB,CATS;;AAgB3BE,EAAAA,YAAY,CAACb,MAAD,EAAS;AACnBc,IAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACD;;AAlB0B,CAAD,CAA5B;AAoBA,MAAMgB,GAAG,GAAGX,SAAS,CAACR,OAAD,CAArB;AAEA,eAAemB,GAAf","sourcesContent":["import React from 'react'\nimport { Form, Field, withFormik } from 'formik'\nimport * as Yup from 'yup'\n// import axios from 'axios'\n\nconst AppForm = ({ errors, touched, values }) => {\n  return (\n    <div>\n      <Form>\n        <Field type='name' name='name' placeholder='Name' />\n        {touched.name && errors.name && <p>{errors.name}</p>}\n        <Field type='email' name='email' placeholder='Email' />\n        {touched.email && errors.email && <p>{errors.email}</p>}\n        <Field type='password' name='password' placeholder='Password' />\n        {touched.password && errors.password && <p>{errors.password}</p>}\n        <label>\n          <Field type='checkbox' name='term' checked={values.term} />I agree to\n          the Terms and Conditions\n        </label>\n        <button>Submit!</button>\n      </Form>\n    </div>\n  )\n}\n\nconst formikHOC = withFormik({\n  mapPropsToValues({ name, password, term }) {\n    return {\n      name: name || '',\n      email: email || '',\n      password: password || '',\n      term: term || false\n    }\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(),\n    email: Yup.email().required(),\n    password: Yup.string()\n      .min(6)\n      .required()\n  }),\n  handleSubmit(values) {\n    console.log(values)\n  }\n})\nconst AWF = formikHOC(AppForm)\n\nexport default AWF\n"]},"metadata":{},"sourceType":"module"}